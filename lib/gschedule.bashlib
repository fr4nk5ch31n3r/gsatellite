#!/bin/bash
#  gschedule.bashlib - common gscheduler functions and variables

:<<COPYRIGHT

Copyright (C) 2012 Frank Scheiner

The program is distributed under the terms of the GNU General Public License

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

COPYRIGHT

:<<INCLUDE
utils.bashlib
ipc.bashlib
INCLUDE

:<<FUNCTIONS
gschedule/anyRunningJob
gschedule/prepareJob
gschedule/queueJob
gschedule/startJob
gschedule/getJobId
FUNCTIONS

. "$_LIB"/utils.bashlib
. "$_LIB"/ipc.bashlib

_gscheduleVersion="0.0.1"

_gsatBaseDir=$HOME/.gsatellite
_gscheduleBaseDir="$_gsatBaseDir/gschedule"
_gscheduleJobDirs="jobs ready running finished failed"
_gscheduleJobIdSource="$_gscheduleBaseDir/nextJobId"

_gscheduleRunningDir="$_gscheduleBaseDir/running"
_gscheduleFinishedDir="$_gscheduleBaseDir/finished"
_gscheduleFailedDir="$_gscheduleBaseDir/failed"
_gscheduleHeldDir="$_gscheduleBaseDir/held"
_gscheduleQueuedDir="$_gscheduleBaseDir/queued"
_gscheduleJobsDir="$_gscheduleBaseDir/jobs"

################################################################################
#  Defined exit codes
#
#  NOTICE:
#+ We try to restrict the exit codes to codes 0, 1 and 64 - 113, according to
#+ [1].
#+ _____________
#+ [1] <http://tldp.org/LDP/abs/html/exitcodes.html>

_err="1"
_errCannotCreateBaseDir="64"
_errCannotCreateJobDirs="65"
_gschedule_errorRunningJob="66"
_gschedule_errorInvalidJobId="67"
################################################################################


#  prepare gschedule dir
if [[ ! -e "$_gscheduleBaseDir" ]]; then
    #  create base dir and job dirs
    mkdir -p "$_gscheduleBaseDir" &>/dev/null || \
    utils/exit "E: Cannot create \"$_gscheduleBaseDir\"! Exiting." "$_errCannotCreateBaseDir"
    _oldPwd="$PWD"
    cd "$_gscheduleBaseDir"
    mkdir "$_gscheduleRunningDir" \
	  "$_gscheduleFinishedDir" \
	  "$_gscheduleFailedDir" \
          "$_gscheduleHeldDir" \
	  "$_gscheduleQueuedDir" \
	  "$_gscheduleJobsDir" &>/dev/null || \
    utils/exit "E: Cannot create job directories! Exiting." "$_errCannotCreateJobDirs"

    #  initialize job id source
    echo "0" > "$_gscheduleJobIdSource"
    cd "$_oldPwd"
fi


################################################################################

#  NOTICE:
#+ A job is defined as a file containing a/multiple command(s) to run by
#+ gsatellite.
#
#  Example:
#
#  #!/bin/bash
#+ #%gsatjob%
#+ gtransfer -s gsiftp://host.domain1:2811/myfiles/* -d gsiftp://host.domain2:2811/myfiles/

################################################################################

gschedule/handleTerminatedJob() {
        #  finalizing job
        #
        #  usage:
        #+ gschedule/handleTerminatedJob jobId jobExitValue

        local _jobId="$1"
        local _jobExitValue="$2"

        if ! gschedule/isValidJobId "$_jobId"; then
                return "$_gschedule_errorInvalidJobId"
        fi

        local _jobDir="$_gscheduleJobsDir/$_jobId.d"

        #  lock both "running" and "finished" dir

        #  "move" the job from the "running" dir to the "finished" or "failed" 
        #+ dir, depending on the exit value.
        rm "$_gscheduleBaseDir/running/$_jobId.d"

        if [[ "$_jobExitValue" == "0" ]]; then
                #  job finished successfully
                ln -s "$_jobDir" "$_gscheduleFinishedDir/$_jobId.d" && \
                echo "finished" > "$_gscheduleJobsDir/$_jobId.d/state"

        else
                #  job failed
                ln -s "$_jobDir" "$_gscheduleFailedDir/$_jobId.d" && \
                echo "failed" > "$_gscheduleJobsDir/$_jobId.d/state"

        fi

        #  unlock both "running" and "finished" dir

        return
}

gschedule/prepareJob() {
        #  prepare job for running
        #
        #  usage:
        #+ gschedule/prepareJob job jobId

        local _job="$1"
        local _jobId="$2"

        #  first create an own dir for the job
        local _jobDir="$_gscheduleBaseDir/jobs/$_jobId.d"
        mkdir "$_jobDir"

        #  place a host identifier there
        echo "$( hostname --fqdn )" > "$_jobDir/host"
        echo "$_jobId" > "$_jobDir/jobId"

        #  place a copy of the job in the "jobs" dir in "jobtmp"
        mkdir "$_jobDir/jobtmp"
        cp "$_job" "$_jobDir/jobtmp"
        ln -s "$_jobDir/jobtmp/$( basename $_job )" "$_jobDir/$_jobId"

        return
}

gschedule/startJob() {
        #  start job
        #
        #  usage:
        #+ gschedule/runJob jobId

        local _jobId="$1"

        local _jobDir="$_gscheduleJobsDir/$_jobId.d"

        #  lock both "queued" dir and "running" dir

        #  "move" the job from the "queued" dir to the "running" dir
        if [[ -e "$_gscheduleQueuedDir/$_jobId.d" ]]; then
                rm "$_gscheduleQueuedDir/$_jobId.d" &>/dev/null
        fi

        ln -s "$_jobDir" "$_gscheduleBaseDir/running/$_jobId.d" &>/dev/null

        #  unlock both "queued" dir and "running" dir

        local _job=$( readlink "$_gscheduleBaseDir/running/$_jobId.d/$_jobId" )

        sputnikd "$_job" "$_jobDir" "$_jobId"

        #local _gsatellitePid="$!"

        #local _gsatellitePid="2"

        #echo "$_gsatellitePid"

        return 0
}

gschedule/getJobId() {
        #  get job id for job
        #
        #  usage:
        #+ gschedule/getJobId job

        local _job="$1"

        #local _jobId=$( sha1sum < "$_job" | cut -d ' ' -f 1 )
        local _jobId=$( cat "$_gscheduleJobIdSource" )

        #  increment job id source
        echo $(( $_jobId + 1 )) > "$_gscheduleJobIdSource"

        local _jobIdPadded=$( printf %05d $_jobId )

        echo "$_jobIdPadded"

        return
}

gschedule/anyRunningJob() {
        #  is there any job running
        #
        #  usage:
        #+ gschedule/anyRunningJob

        #  lock running dir

        if [[ "$( ls -A "$_gscheduleRunningDir" )" != "" ]]; then
                #  unlock running dir
                return 0
        else
                #  unlock running dir
                return 1
        fi
}

gschedule/queueJob() {
        #  queue the given job
        #
        #  usage:
        #+ gschedule/queueJob job jobId

        #  lock queued dir

        local _job="$1"
        local _jobId="$2"

        local _jobDir="$_gscheduleJobsDir/$_jobId.d"

        #  link the job from the "queued" dir
        ln -s "$_jobDir" "$_gscheduleQueuedDir/$_jobId.d"

        #  TODO:
        #  Clarify if this should be done by the plugin scheduler or this function.
        #echo "queued" > "$_gscheduleQueuedDir/$_jobId.d/state"

        #  unlock queued dir

        return
}

gschedule/isRunningJob() {
        #  check if the job with the given job id is in running state
        #
        #  usage:
        #+ gschedule/isRunningJob jobId

        local _jobId="$1"

        if [[ ! -e "$_gscheduleJobsDir/$_jobId.d/state" ]]; then
                return 1
        fi

        local _jobState=$( cat "$_gscheduleJobsDir/$_jobId.d/state" )

        if [[ "$_jobState" == "running" ]]; then
                return 0
        else
                return 1
        fi
}

gschedule/isValidJobId() {
        #  check if the given job id is valid
        #
        #  usage:
        #+ gschedule/isValidJobId jobId

        local _jobId="$1"

        if grep -w "$_jobId" <( ls -1 "$_gscheduleBaseDir/jobs/" ) &>/dev/null; then
                return 0
        else
                return 1
        fi
}

gschedule/holdJob() {
        #  hold the job with the given job id
        #
        #  usage:
        #+ gschedule/holdJob jobId

        local _jobId="$1"

        if ! gschedule/isValidJobId "$_jobId"; then
                return "$_gschedule_errorInvalidJobId"
        fi

        #  get job dir
        #  TODO:
        #+ and check for existence!
        local _jobDir="$_gscheduleBaseDir/jobs/$_jobId.d"

        #  try to lock job dir until locked
        while ! ipc/lock "$_jobDir"; do
                sleep 1
        done        

        #  if job is running, 
        if gschedule/isRunningJob "$_jobId"; then
                #  create temporary message box
                local _tempMsgBox=$( ipc/file/createTempMsgBox )

                #  get corresponding satellite (sputnik)
                local _sputnikPid=$( cat "$_jobDir/sputnik.pid" )
                local _sputnikHostname=$( cat "$_jobDir/host" )
                local _sputnikMessageBox="$_MBOXES/$_sputnikHostname/$_sputnikPid.inbox"

                local _message="HOLD;$_tempMsgBox"

                #  send "HOLD" message to sputnik
                if ! ipc/file/sendMsg "$_sputnikMessageBox" "$_message"; then
                        echo "E: ipc/file/sendMsg() failed!" 1>&2
                        return 1
                fi

                #  wake up sputnik
                local _signal="SIGCONT"

                #  wake sputnik with signal forwarding
                ipc/file/sigfwd/forwardSignal "$_sputnikHostname" "$_sputnikPid" "$_signal" || \
                (echo "E: ipc/file/sigfwd/forwardSignal() failed!" 1>&2 && return 1)

                #  receive acknowledgement
                local _receivedMessage=""

                while [[ 1 ]]; do
                        #  touch it first, so changes on other hosts are propagated
                        touch --no-create "$_tempMsgBox"
                        if ipc/file/messageAvailable "$_tempMsgBox"; then
                                #  This does not work!
                                #local _receivedMessage=$( ipc/file/receiveMsg "$_tempMsgBox" )
                                #  without "local" keyword, it works
                                _receivedMessage=$( ipc/file/receiveMsg "$_tempMsgBox" )

                                if [[ $? -eq 0 ]]; then
                                        echo "($$) DEBUG: _receivedMessage=\"$_receivedMessage\""
                                        break
                                fi
                        else
                                sleep 0.5
                        fi
                done

                local _receivedCommand=${_receivedMessage%%;*}

                if [[ "$_receivedCommand" == "OK" ]]; then
                        ipc/file/removeMsgBox "$_tempMsgBox"
                        ipc/unlock "$_jobDir"
                        return 0
                else
                        ipc/file/removeMsgBox "$_tempMsgBox"
                        ipc/unlock "$_jobDir"
                        return 1
                fi
        fi

        #  move job to held state
        rm "$_gscheduleBaseDir/$( gschedule/getJobState $_jobId )/$_jobId.d"

        ln -s "$_jobDir" "$_gscheduleHeldDir/$_jobId.d" && \
        echo "held" > "$_gscheduleJobsDir/$_jobId.d/state"

        ipc/unlock "$_jobDir"

        return
}


gschedule/releaseJob() {
        #  hold the job with the given job id
        #
        #  usage:
        #+ gschedule/releaseJob jobId

        local _jobId="$1"

        if ! gschedule/isValidJobId "$_jobId"; then
                return "$_gschedule_errorInvalidJobId"
        fi

        #  get job dir
        #  TODO:
        #+ and check for existence!
        local _jobDir="$_gscheduleBaseDir/jobs/$_jobId.d"

        #  try to lock job dir until locked
        while ! ipc/lock "$_jobDir"; do
                sleep 1
        done        

        #  release job
        rm "$_gscheduleBaseDir/held/$_jobId.d"

        ln -s "$_jobDir" "$_gscheduleQueuedDir/$_jobId.d" && \
        echo "queued" > "$_gscheduleJobsDir/$_jobId.d/state"

        ipc/unlock "$_jobDir"

        return
}


gschedule/removeJob() {
        #  remove the job with the given job id
        #
        #  usage:
        #+ gschedule/removeJob jobId

        local _jobId="$1"

        if ! gschedule/isValidJobId "$_jobId"; then
                return "$_gschedule_errorInvalidJobId"
        fi

        #  get job dir
        #  TODO:
        #+ and check for existence!
        local _jobDir="$_gscheduleBaseDir/jobs/$_jobId.d"

        local _jobState=$( cat "$_jobDir/state" )

        #  try to lock job dir until locked
        while ! ipc/lock "$_jobDir"; do
                sleep 1
        done

        #  if job is running, retreat
        if gschedule/isRunningJob "$_jobId"; then
                ipc/unlock "$_jobDir"
                return "$_gschedule_errorRunningJob"
        #  else remove job dir and link
        else
                #  first remove link
                rm -f "$_gscheduleBaseDir/$_jobState/$_jobId.d"

                #  then remove actual job dir
                rm -rf "$_jobDir"

                #  finally unlock it
                ipc/unlock "$_jobDir"

                return
        fi
}

gschedule/getJobState() {
        #  usage:
        #+ gschedule/getJobState jobId

        local _jobId="$1"

        if ! gschedule/isValidJobId "$_jobId"; then
                return "$_gschedule_errorInvalidJobId"
        fi

        #  get job dir
        #  TODO:
        #+ and check for existence!
        local _jobDir="$_gscheduleBaseDir/jobs/$_jobId.d"

        local _jobState=$( cat "$_jobDir/state" )

        echo "$_jobState"

        return
}

gschedule/getNextQueuedJob() {
        #  get the job id of the oldest job in the queued dir
        #
        #  usage:
        #+ gschedule/getNextQueuedJob

        #  TODO:
        #  Implementation
        
        local _nextQueuedJobId=$( ls -1 "$_gscheduleQueuedDir" | head -1 | cut -d '.' -f 1 )

        if [[ "$_nextQueuedJobId" != "" ]]; then
                echo "$_nextQueuedJobId"
                return 0
        else
                return 1
        fi
}

