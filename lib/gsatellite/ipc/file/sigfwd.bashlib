#  ipc/file/sigfwd.bashlib - utility functions for signal forwarding

:<<COPYRIGHT

Copyright (C) 2012 Frank Scheiner
Copyright (C) 2013 Frank Scheiner, HLRS, Universitaet Stuttgart

The program is distributed under the terms of the GNU General Public License

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

COPYRIGHT

:<<INCLUDE
../file.bashlib
../../utils.bashlib
INCLUDE

. "$_LIB"/ipc/file.bashlib
. "$_LIB"/utils.bashlib

:<<FUNCTIONS
ipc/file/sigfwd/forwardSignal
ipc/file/sigfwd/startSigFwd
ipc/file/sigfwd/stopSigFwd
FUNCTIONS

_DEBUG="0"

_ipc_file_sigfwdInboxName="sigfwd.inbox"
_ipc_file_sigfwdPid=""


ipc/file/sigfwd/startSigfwd() {
        #  start "local" signal forwarder
        #
        #  usage:
        #+ ipc/file/sigfwd/startSigfwd

        sigfwd &

        _ipc_file_sigfwdPid="$!"

        echo "$_ipc_file_sigfwdPid"

        return
}

ipc/file/sigfwd/stopSigfwd() {
        #  stop "local" signal forwarder
        #
        #  usage:
        #+ ipc/file/sigfwd/stopSigfwd

        if [[ -n "$_ipc_file_sigfwdPid" ]]; then
                /bin/kill "$_ipc_file_sigfwdPid"
                return
        else
                return 2
        fi
}

# delegateAction() - Delegate action to signal forwarder. This allows the signal
# forwarder to execute actions on behalf of a pausing process.
#
# @_action: The file that contains the action. The signal forwarder will execute
#           this file in the background.
#
# Prints the action ID and returns 0 on success, 1 otherwise.
ipc/file/sigfwd/delegateAction()
{
	local _hostName="$1"
	local _action="$2"

	#  use a temporary inbox when contacting the signal forwarder
        local _answerBox=$( ipc/file/createTempMsgBox )

        if [[ "$?" != "0" ]]; then
                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in delegateAction _answerBox=\"$_answerBox\" creation failed." 1>&2
                echo "($$) [sigfwd.bashlib] E: Temporary message box couldn't be created!" 1>&2
                return 1
        else
                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in delegateAction _answerBox=\"$_answerBox\"" 1>&2
        fi

	# TODO:
	# How to support paths that include " " in dir names?
        ipc/file/sendMsg "$_MBOXES/$_hostName/$_ipc_file_sigfwdInboxName" "DELEGATE_ACTION $_action;$_answerBox" || \
        return 1

	local _answer=""

        while [[ 1 ]]; do
                #  touch it first, so changes on other hosts are propagated
                touch --no-create "$_answerBox"
                if ipc/file/messageAvailable "$_answerBox"; then
                        _answer=$( ipc/file/receiveMsg "$_answerBox" )

                        local _funcRetVal="$?"

                        if [[ "$_funcRetVal" == "0" ]]; then
                                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in delegateAction received \"$_answer\"" 1>&2
                                # print action ID
                                echo ${answer%%;*}
                                ipc/file/removeMsgBox "$_answerBox"
                                break
                        else
                                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in delegateAction receiveMsg didn't return \"0\"" 1>&2
                        fi
                else
                        sleep 0.5
                fi
        done

        return $_funcRetVal
}


# undelegateAction() - Undelegate (stop) the action identified by the given PID.
#
# @_actionId: Valid action ID
#
# Returns 0 on success, 1 otherwise.
ipc/file/sigfwd/undelegateAction()
{
	local _hostName="$1"
	local _actionId="$2"

	#  use a temporary inbox when contacting the signal forwarder
        local _answerBox=$( ipc/file/createTempMsgBox )

        if [[ "$?" != "0" ]]; then
                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in undelegateAction _answerBox=\"$_answerBox\" creation failed." 1>&2
                echo "($$) [sigfwd.bashlib] E: Temporary message box couldn't be created!" 1>&2
                return 1
        else
                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in undelegateAction _answerBox=\"$_answerBox\"" 1>&2
        fi

	# TODO:
	# How to support paths that include " " in dir names?
        ipc/file/sendMsg "$_MBOXES/$_hostName/$_ipc_file_sigfwdInboxName" "UNDELEGATE_ACTION $_actionId;$_answerBox" || \
        return 1

	local _answer=""

        while [[ 1 ]]; do
                #  touch it first, so changes on other hosts are propagated
                touch --no-create "$_answerBox"
                if ipc/file/messageAvailable "$_answerBox"; then
                        _answer=$( ipc/file/receiveMsg "$_answerBox" )

                        local _funcRetVal="$?"

                        if [[ "$_funcRetVal" == "0" ]]; then
                                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in undelegateAction received \"$_answer\"" 1>&2
                                if [[ ${answer%%;*} == "OK" ]]; then
					local _returnVal=0
                                else
					local _returnVal=1
                                fi
                                break
                        else
                                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in undelegateAction receiveMsg() didn't return \"0\"" 1>&2
                        fi
                else
                        sleep 0.5
                fi
        done

        ipc/file/removeMsgBox "$_answerBox"

        return $_returnVal
}


#  TODO:
#  Needs some rework (message receiving)!
ipc/file/sigfwd/forwardSignal() {
        local _hostName="$1"
        local _pid="$2"
        local _signal="$3"

        #  if target is on the same host, ...
        if [[ "$_hostName" == $( utils/getHostName ) ]]; then
                #  ...then use kill directly
                kill -"$_signal" "$_pid"
                return "$?"
        fi

        #  use a temporary inbox during signal forwarding
        #local _answerBoxName="temp.inbox"
        local _answerBox=$( ipc/file/createTempMsgBox )

        if [[ "$?" != "0" ]]; then
                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in forwardSignal _answerBox=\"$_answerBox\" creation failed." 1>&2
                echo "($$) [sigfwd.bashlib] E: Temporary message box couldn't be created!" 1>&2
                return 1
        else
                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in forwardSignal _answerBox=\"$_answerBox\"" 1>&2
        fi

        ipc/file/sendMsg "$_MBOXES/$_hostName/$_ipc_file_sigfwdInboxName" "$_signal $_pid;$_answerBox" || \
        return 1

        local _answer=""

        while [[ 1 ]]; do
                #  touch it first, so changes on other hosts are propagated
                touch --no-create "$_answerBox"
                if ipc/file/messageAvailable "$_answerBox"; then
                        _answer=$( ipc/file/receiveMsg "$_answerBox" )

                        local _funcRetVal="$?"

                        if [[ "$_funcRetVal" == "0" ]]; then
                                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in forwardSignal received \"$_answer\"" 1>&2
                                ipc/file/removeMsgBox "$_answerBox"
                                break
                        else
                                [[ "$_DEBUG" == "1" ]] && echo "($$) [sigfwd.bashlib] DEBUG: in forwardSignal receiveMsg didn't return \"0\"" 1>&2
                        fi
                else
                        sleep 0.5
                fi
        done


        #  _answer is "return_value_of_kill;inbox_of_sigfwd"
        local _killRetVal=$( echo "$_answer" | cut -d ';' -f 1 )

        return "$_killRetVal"
}

