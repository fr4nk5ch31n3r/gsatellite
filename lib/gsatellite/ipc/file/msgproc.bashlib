#  msgproc.bashlib - standard message processing functionality

:<<COPYRIGHT

Copyright (C) 2012 Frank Scheiner
Copyright (C) 2013 Frank Scheiner, HLRS, Universitaet Stuttgart

The program is distributed under the terms of the GNU General Public License

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

COPYRIGHT

:<<INCLUDE
../file.bashlib
INCLUDE

. "$_LIB"/ipc/file.bashlib

################################################################################

# processMsg() - standard message processing functionality like returning the
# PID or the host a process runs on or if it is alive or stopping on request.
#
# @_message: Message to process (e.g. "ALIVE?;answerBox")
# @_inbox:   Inbox of process/programm that uses this funtion.
#
# Returns 1 on error (e.g. on an unknown command)
ipc/file/msgproc/processMsg() {

        local _message="$1"
        local _inbox="$2"

        local _command=""
        local _answerBox=""

        _command=$( echo "$_message" | cut -d ';' -f 1 )
        _answerBox=$( echo "$_message" | cut -d ';' -f 2 )

        [[ "$_DEBUG" == "1" ]] && echo "($$) [msgproc.bashlib] DEBUG: in ipc/file/msgproc/processMsg() _message=\"$_message\" _inbox=\"$_inbox\"" 1>&2

        #  standard message processing functionality
        if [[ "$_command" == "ALIVE?" ]]; then

                ipc/file/sendMsg "$_answerBox" "YES;$_inbox"
                local _retVal="$?"
                [[ "$_DEBUG" == "1" ]] && echo "($$) [msgproc.bashlib] DEBUG: in ipc/file/msgproc/processMsg() after sendMsg(\"$_answerBox\",\"YES;$_inbox\") which returned \"$_retVal\"" 1>&2
                return "$_retVal"

        elif [[ "$_command" == "STOP" ]]; then

                ipc/file/sendMsg "$_answerBox" "STOPPING;$_inbox"
                local _retVal="$?"
                [[ "$_DEBUG" == "1" ]] && echo "($$) [msgproc.bashlib] DEBUG: in ipc/file/msgproc/processMsg() after sendMsg(\"$_answerBox\",\"STOPPING;$_inbox\") which returned \"$_retVal\"" 1>&2
                exit "$_retVal"

        elif [[ "$_command" == "PID?" ]]; then

                ipc/file/sendMsg "$_answerBox" "$$;$_inbox"
                local _retVal="$?"
                [[ "$_DEBUG" == "1" ]] && echo "($$) [msgproc.bashlib] DEBUG: in ipc/file/msgproc/processMsg() after sendMsg(\"$_answerBox\",\"$$;$_inbox\") which returned \"$_retVal\"" 1>&2
                return "$_retVal"

        elif [[ "$_command" == "HOST?" ]]; then

                ipc/file/sendMsg "$_answerBox" "$( hostname --fqdn );$_inbox"
                local _retVal="$?"
                [[ "$_DEBUG" == "1" ]] && echo "($$) [msgproc.bashlib] DEBUG: in ipc/file/msgproc/processMsg() after sendMsg(\"$_answerBox\",\"$( hostname --fqdn );$_inbox\") which returned \"$_retVal\"" 1>&2
                return "$_retVal"

        #  to expand add new commands and handling here
        #elif [[ "$_command" == "<NEW_COMMAND>" ]]; then
        #        <DO_SOMETHING>
        #        ipc/file/sendMsg "$_answerBox" "$( hostname --fqdn );$_inbox"
        #        return
        #  the last command should always be the "UNKNOWN COMMAND".

        else
                ipc/file/sendMsg "$_answerBox" "UNKNOWN COMMAND;$_inbox"
                local _retVal="$?"
                [[ "$_DEBUG" == "1" ]] && echo "($$) [msgproc.bashlib] DEBUG: in ipc/file/msgproc/processMsg() after sendMsg(\"$_answerBox\",\"UNKNOWN COMMAND;$_inbox\") which returned \"$_retVal\"" 1>&2
                return 1
        fi
}

