#!/bin/bash

# gschedule/fifo.bashlib - FIFO scheduler for gsatellite

:<<COPYRIGHT

Copyright (C) 2012 Frank Scheiner
Copyright (C) 2014 Frank Scheiner, HLRS, Universitaet Stuttgart

The program is distributed under the terms of the GNU General Public License

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

COPYRIGHT

################################################################################
# DEFINES
################################################################################

readonly _gsatellite_gschedule_fifo_version="0.2.0"
readonly _gsatellite_gschedule_fifo_selfName="gsatellite/gschedule/fifo"
readonly _thisScheduler="fifo"

################################################################################
# EXTERNAL VARIABLES
################################################################################

# _LIB

################################################################################
# INCLUDES
################################################################################

. "$_LIB"/gsatellite/gschedule.bashlib 2>/dev/null

################################################################################
# FUNCTIONS
################################################################################

#  General TODO:
#+ All actions in and on job dirs should be encapsulated in functions!

# Public: Determine if given job is runable.
#
# $1 (_job) - The job (string) file. (UNUSED)
#
# Returns 0 on success (job is runable), 1 otherwise (job is not runable).
gschedule/fifo/isRunableJob()
{
        #  TODO:
        #+ Check if job is valid!
        local _job="$1"

        if ! gschedule/anyRunningJob; then
                return 0
        else
                return 1
        fi
}


# Public: Schedule given job. If job is not provided, start next runable job.
#
# $1 (_job) - The job (string) to schedule. (OPTIONAL)
#
# Return 0 on success, 1 otherwise.
gschedule/fifo/schedule()
{
        #  schedule job
        #
        #  usage:
        #+ gschedule/nobatch/schedule [job]

        local _jobId=""

        if [[ "$1" != "" ]]; then

                local _job="$1"

                #  get id for job
                _jobId=$( gschedule/getJobId "$_job" )

                gschedule/prepareJob "$_job" "$_jobId"

                #  TODO:
                #+ needs rework, as the only option is not evaluated and also
                #+ not needed.
                #  scheduling decision
                if gschedule/fifo/isRunableJob "$_job"; then

                        #  TODO:
                        #+ Although sputnik is started in the background by
                        #+ gschedule/startjob, the "$( [...] )" seems to force
                        #+ gschedule/startjob to wait for its child (sputnik).
                        #+ This would be a problem!
                        #+
                        #+ This is the case. So sputnik is changed in that way
                        #+ that it writes its PID to a file in the job dir.

                        #  gschedule/startJob
                        #local _sputnikPid=$( gschedule/startJob "$_jobId" )
                        gschedule/startJob "$_jobId"

                        if [[ "$?" == "0" ]]; then
                                echo "$_jobId"
                                return 0
                        else
                                echo "$_jobId"
                                return 1        #  TODO: _gschedule_errorJobCouldNotBeStarted
                        fi

                else
                        gschedule/queueJob "$_job" "$_jobId"

                        if [[ "$?" == "0" ]]; then
                                #echo "queued" > "$_gscheduleBaseDir/jobs/$_jobId.d/state"

                                echo "$_jobId"
                                return 0
                        else
                                return 1        #  TODO: _gschedule_errorJobCouldNotBeQueued
                        fi
                fi

        else
                #  NOTICE:
                #+ The following instruction(s) doesn't/don't work if "_jobId"
                #+ is preceded by "local ". The following if clause fails when
                #+ "local " is used, but it works if we check for the content of
                #+ "_jobId". When the return value is checked, with the now
                #+ commented echo statement, it is "0", despite the function
                #+ should have returned "1". Strange behaviour. :-/

                #  pick the oldest job from the "queued" dir (job with lowest
                #+ job id) and start it.                
                #local _jobId=$( gschedule/getNextQueuedJob )
                _jobId=$( gschedule/getNextQueuedJob )

                #echo "($$) DEBUG: \$?=\"$?\""

                #if [[ "$_jobId" == "" ]]; then
                if [[ ! $? -eq 0 ]]; then
                        #  no job available for scheduling
                        return 1        #  TODO: _gschedule_errorNoJobToSchedule
                fi

                #  TODO:
                #+ needs rework, as the only option is not evaluated and also
                #+ not needed.
                #  scheduling decision
                if gschedule/fifo/isRunableJob "$_job"; then

                        #  gschedule/startJob
                        gschedule/startJob "$_jobId"

                        if [[ "$?" == "0" ]]; then
                                return 0
                        else
                                return 1
                        fi

                fi
        fi
}

