#!/bin/bash

# gschedule/nobatch.bashlib - non batch scheduler for gsatellite

:<<COPYRIGHT

Copyright (C) 2012 Frank Scheiner
Copyright (C) 2014 Frank Scheiner, HLRS, Universitaet Stuttgart

The program is distributed under the terms of the GNU General Public License

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

COPYRIGHT

################################################################################
# DEFINES
################################################################################

readonly _gsatellite_gschedule_nobatch_version="0.2.0"
readonly _gsatellite_gschedule_nobatch_selfName="gsatellite/gschedule/nobatch"
readonly _thisScheduler="nobatch"

################################################################################
# EXTERNAL VARIABLES
################################################################################

# _LIB

################################################################################
# INCLUDES
################################################################################

. "$_LIB"/gsatellite/gschedule.bashlib 2>/dev/null

################################################################################
# FUNCTIONS
################################################################################

# Public: Determine if given job is runable. Fo the nobatch scheduler all jobs
#         are runable.
#
# Always returns 0.
gschedule/nobatch/isRunableJob()
{
        # This is the NON BATCH scheduler, hence all jobs can run at once.

        # TODO:
        # Check if job is valid?
        return 0
}


# Public: Schedule given job. If job is not provided do nothing.
#
# $1 (_job) - The job (string) to schedule. (OPTIONAL)
#
# Return 0 on success, 1 otherwise.
gschedule/nobatch/schedule()
{
        local _jobId=""

        if [[ "$1" != "" ]]; then

                local _job="$1"

                # get id for job
                _jobId=$( gschedule/getJobId "$_job" )

                gschedule/prepareJob "$_job" "$_jobId"

                # scheduling decision
                if gschedule/nobatch/isRunableJob "$_job"; then

                        # gschedule/startJob
                        #local _sputnikPid=$( gschedule/startJob "$_jobId" )
                        gschedule/startJob "$_jobId"

                        if [[ "$?" == "0" ]]; then
                                echo "$_jobId"
                                return 0
                        else
                                echo "$_jobId"
                                return 1        #  TODO: _gschedule_errorJobCouldNotBeStarted
                        fi
                else
                        gschedule/queueJob "$_job" "$_jobId"
                        if [[ "$?" == "0" ]]; then
                                #echo "queued" > "$_gscheduleBaseDir/jobs/$_jobId.d/state"

                                echo "$_jobId"
                                return 0
                        else
                                return 1        #  TODO: _gschedule_errorJobCouldNotBeQueued
                        fi
                fi

        else
                # Do nothing. This is the nobatch scheduler, so jobs are started
                # directly after submission. Hence no scheduling needed after a
                # job is finished.
                :
                return
        fi
}

