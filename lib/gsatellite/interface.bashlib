#!/bin/bash

#  interface - gsatellite interface library

:<<COPYRIGHT

Copyright (C) 2012 Frank Scheiner
Copyright (C) 2013 Frank Scheiner, HLRS, Universitaet Stuttgart

The program is distributed under the terms of the GNU General Public License

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

COPYRIGHT

################################################################################
# DEFINES
################################################################################

readonly _gsatellite_interface_version="0.1.0"

################################################################################
# INCLUDES
################################################################################

:<<INCLUDES
gsatellite/ipc/file/sigfwd.bashlib
gsatellite/utils.bashlib
gsatellite/gsatlc.bashlib
INCLUDES

_neededLibraries=(
"${_gsatellite_libraryPrefix}/ipc/file/sigfwd.bashlib"
"${_gsatellite_libraryPrefix}/utils.bashlib"
"${_gsatellite_libraryPrefix}/gsatlc.bashlib"
)

for _library in ${_neededLibraries[@]}; do

# TODO
# Add clause to cancel loading of library, if it was already included by another
# library.

	if ! . "$_LIB"/"$_library"; then
		echo "($_program) E: Library \""$_LIB"/"$_library"\" couldn't be read or is corrupted." 1>&2
		exit 70
	fi
done



################################################################################
# FUNCTIONS
################################################################################

# qsub() - submit job to gsatellite
#
# @_job: job file to submit
#
# Returns 0 on success, 1 otherwise.
gsat/qsub()
{
        local _job="$1"

        #  add absolute path if needed
        if [[ ${_job:0:1} != "/" ]]; then
                _job="$PWD/$_job"
        elif [[ ${_job:0:2} == "./" ]]; then
                _job="${PWD}${_job#.}"
        fi

        #  If job's not existing, retreat.
        if [[ ! -e "$_job" ]]; then
                echo "E: Job not existing!" 1>&2
                return 1
        fi

        local _tempMsgBox=$( ipc/file/createTempMsgBox )

        #  send qsub command to gsatlc
        local _message="QSUB $_job;$_tempMsgBox"

        #  TODO:
        #+ Cover the case when gsatlc is not running! Also for other qx
        #+ functions!
        local _gsatlcHostName=$( cat "$_gsatBaseDir/gsatlcHostName" )
        local _gsatlcPid=$( cat "$_gsatBaseDir/gsatlcPid" )
        local _messageBox="$_MBOXES/$_gsatlcHostName/$_gsatlcPid.inbox"

        if ! ipc/file/sendMsg "$_messageBox" "$_message"; then
                echo "E: ipc/file/sendMsg() failed!" 1>&2
                return 1
        fi

        local _signal="SIGCONT"

        #  wake gsatlc with signal forwarding
        ipc/file/sigfwd/forwardSignal "$_gsatlcHostName" "$_gsatlcPid" "$_signal"
        if [[ "$?" != "0" ]]; then
                echo "E: ipc/file/sigfwd/forwardSignal() failed!" 1>&2
                return 1
        fi

        local _receivedMessage=""

        while [[ 1 ]]; do
                #  touch it first, so changes on other hosts are propagated
                touch --no-create "$_tempMsgBox"
                if ipc/file/messageAvailable "$_tempMsgBox"; then
                        #  This does not work!
                        #local _receivedMessage=$( ipc/file/receiveMsg "$_tempMsgBox" )
                        #  without "local" keyword, it works
                        _receivedMessage=$( ipc/file/receiveMsg "$_tempMsgBox" )

                        if [[ $? -eq 0 ]]; then
                                #echo "($$) DEBUG: _receivedMessage=\"$_receivedMessage\""
                                break
                        fi
                else
                        sleep 0.5
                fi
        done

        local _receivedCommand=${_receivedMessage%%;*}

        #echo "($$) DEBUG: _receivedMessage=\"$_receivedMessage\""
        #echo "($$) DEBUG: _receivedCommand=\"$_receivedCommand\""

        if [[ "$_receivedCommand" == "qsub failed" ]]; then
                echo "E: qsub failed!" 1>&2
                ipc/file/removeMsgBox "$_tempMsgBox"
                return 1
        else
                echo "$_receivedCommand"
                ipc/file/removeMsgBox "$_tempMsgBox"
                return 0
        fi

}


# qhold() - hold a gsatellite job
#
# $_jobId: Id of the job
#
# Returns 0 on success, 1 otherwise.
gsat/qhold()
{
        local _jobId="$1"

        #  TODO:
        #+ Only hold jobs that are in state "queued" or "running". And also
        #+ introduce second path that avoids message communication.

        local _tempMsgBox=$( ipc/file/createTempMsgBox )

        #  send qhold command to gsatlc
        local _message="QHOLD $_jobId;$_tempMsgBox"

        local _gsatlcHostName=$( cat "$_gsatBaseDir/gsatlcHostName" )
        local _gsatlcPid=$( cat "$_gsatBaseDir/gsatlcPid" )
        local _messageBox="$_MBOXES/$_gsatlcHostName/$_gsatlcPid.inbox"

        if ! ipc/file/sendMsg "$_messageBox" "$_message"; then
                echo "E: ipc/file/sendMsg() failed!" 1>&2
                return 1
        fi

        local _signal="SIGCONT"

        #  wake gsatlc with signal forwarding
        ipc/file/sigfwd/forwardSignal "$_gsatlcHostName" "$_gsatlcPid" "$_signal" || \
        (echo "E: ipc/file/sigfwd/forwardSignal() failed!" 1>&2 && return 1)

        local _receivedMessage=""

        while [[ 1 ]]; do
                #  touch it first, so changes on other hosts are propagated
                touch --no-create "$_tempMsgBox"
                if ipc/file/messageAvailable "$_tempMsgBox"; then
                        #  This does not work!
                        #local _receivedMessage=$( ipc/file/receiveMsg "$_tempMsgBox" )
                        #  without "local" keyword, it works
                        _receivedMessage=$( ipc/file/receiveMsg "$_tempMsgBox" )

                        if [[ $? -eq 0 ]]; then
                                #echo "($$) DEBUG: _receivedMessage=\"$_receivedMessage\""
                                break
                        fi
                else
                        sleep 0.5
                fi
        done

        local _receivedCommand=${_receivedMessage%%;*}

        #echo "($$) DEBUG: _receivedMessage=\"$_receivedMessage\""
        #echo "($$) DEBUG: _receivedCommand=\"$_receivedCommand\""

        if [[ "$_receivedCommand" != "OK" ]]; then
                echo "E: qhold failed!" 1>&2
                ipc/file/removeMsgBox "$_tempMsgBox"
                return 1
        else
                ipc/file/removeMsgBox "$_tempMsgBox"
                return 0
        fi

}


# qrls - release a hold on a gsatellite job
#
# $_jobId: Id of the job
#
# Returns 0 on success, 1 otherwise.
gsat/qrls()
{
        local _jobId="$1"

        #  Integrated second possible path which checks directly if a job is
        #+ running without interacting with gsatlc. This saves some cycles.
        if [[ $( gschedule/getJobState "$_jobId" ) != "held" ]]; then
                #  retreat
                echo "E: qrls failed! Job \"$_jobId\" not in held state!" 1>&2
                return 1
        else

                local _tempMsgBox=$( ipc/file/createTempMsgBox )

                #  send qhold command to gsatlc
                local _message="QRLS $_jobId;$_tempMsgBox"

                local _gsatlcHostName=$( cat "$_gsatBaseDir/gsatlcHostName" )
                local _gsatlcPid=$( cat "$_gsatBaseDir/gsatlcPid" )
                local _messageBox="$_MBOXES/$_gsatlcHostName/$_gsatlcPid.inbox"

                if ! ipc/file/sendMsg "$_messageBox" "$_message"; then
                        echo "E: ipc/file/sendMsg() failed!" 1>&2
                        return 1
                fi

                local _signal="SIGCONT"

                #  wake gsatlc with signal forwarding
                ipc/file/sigfwd/forwardSignal "$_gsatlcHostName" "$_gsatlcPid" "$_signal" || \
                (echo "E: ipc/file/sigfwd/forwardSignal() failed!" 1>&2 && return 1)

                local _receivedMessage=""

                while [[ 1 ]]; do
                        #  touch it first, so changes on other hosts are propagated
                        touch --no-create "$_tempMsgBox"
                        if ipc/file/messageAvailable "$_tempMsgBox"; then
                                #  This does not work!
                                #local _receivedMessage=$( ipc/file/receiveMsg "$_tempMsgBox" )
                                #  without "local" keyword, it works
                                _receivedMessage=$( ipc/file/receiveMsg "$_tempMsgBox" )

                                if [[ $? -eq 0 ]]; then
                                        #echo "($$) DEBUG: _receivedMessage=\"$_receivedMessage\""
                                        break
                                fi
                        else
                                sleep 0.5
                        fi
                done

                local _receivedCommand=${_receivedMessage%%;*}

                #echo "($$) DEBUG: _receivedMessage=\"$_receivedMessage\""
                #echo "($$) DEBUG: _receivedCommand=\"$_receivedCommand\""

                if [[ "$_receivedCommand" != "OK" ]]; then
                        echo "E: qrls failed!" 1>&2
                        ipc/file/removeMsgBox "$_tempMsgBox"
                        return 1
                else
                        ipc/file/removeMsgBox "$_tempMsgBox"
                        return 0
                fi
        fi
}


# qdel() - remove a job from gsatellite
#
# $_jobId: Id of the job
#
# Returns 0 on success, 1 otherwise.
gsat/qdel()
{
        local _jobId="$1"

        #  Integrated second possible path which checks directly if a job is
        #+ running or has a valid job id without interacting with gsatlc. This
        #+ saves some cycles.
        if ! gschedule/isValidJobId "$_jobId" || gschedule/isRunningJob "$_jobId"; then
                #  retreat
                echo "E: qdel failed!" 1>&2
                return 1
        else

                local _tempMsgBox=$( ipc/file/createTempMsgBox )

                #  send qdel command to gsatlc
                local _message="QDEL $_jobId;$_tempMsgBox"

                local _gsatlcHostName=$( cat "$_gsatBaseDir/gsatlcHostName" )
                local _gsatlcPid=$( cat "$_gsatBaseDir/gsatlcPid" )
                local _messageBox="$_MBOXES/$_gsatlcHostName/$_gsatlcPid.inbox" 

                if ! ipc/file/sendMsg "$_messageBox" "$_message"; then
                        echo "E: ipc/file/sendMsg failed!" 1>&2
                        return 1
                fi

                local _signal="SIGCONT"

                #  wake qsatlc with signal forwarding
                ipc/file/sigfwd/forwardSignal "$_gsatlcHostName" "$_gsatlcPid" "$_signal" || \
                (echo "E: ipc/file/sigfwd/forwardSignal() failed!" 1>&2 && return 1)

                local _receivedMessage=""

                while [[ 1 ]]; do
                        #  touch it first, so changes on other hosts are propagated
                        touch --no-create "$_tempMsgBox"
                        if ipc/file/messageAvailable "$_tempMsgBox"; then
                                #  This does not work!
                                #local _receivedMessage=$( ipc/file/receiveMsg "$_tempMsgBox" )
                                #  without "local" keyword, it works
                                _receivedMessage=$( ipc/file/receiveMsg "$_tempMsgBox" )

                                if [[ $? -eq 0 ]]; then
                                        #echo "($$) DEBUG: _receivedMessage=\"$_receivedMessage\""
                                        break
                                fi
                        else
                                sleep 0.5
                        fi
                done

                local _receivedCommand=${_receivedMessage%%;*}

                if [[ "$_receivedCommand" != "OK" ]]; then
                        echo "E: qdel failed!" 1>&2
                        ipc/file/removeMsgBox "$_tempMsgBox"
                        return 1
                else
                        ipc/file/removeMsgBox "$_tempMsgBox"
                        return 0
                fi
        fi

        return

}


# listJobsInState() - List gsatellite jobs in specified state
#
# $_jobState: Desired job state
#
# Returns 0 on success.
gsat/listJobsInState() {
        #  list gsatellite jobs in specified state
        #
        #  usage:
        #+ gsatlc/listJobsInState jobState

        local _jobState="$1"

        #  right-bound text ouptut (default!)
        printf "%12s\t%12s\t%12s\t%12s\n" "job.state" "job.id" "job.execHost" "job.name"
        echo -e "------------\t------------\t------------\t------------"

        for _jobDir in $( ls -1 "$_gscheduleBaseDir/$_jobState" ); do

                #echo "($$) DEBUG: _jobDir=\"$_jobDir\""

                local _jobId=$( basename "$_gscheduleBaseDir/$_jobState/$_jobDir" )
                _jobId=${_jobId%.d}
                local _jobHost=$( cat "$_gscheduleBaseDir/jobs/$_jobDir/job.execHost" 2>/dev/null )
                local _jobName=$( basename $( readlink "$_gscheduleBaseDir/$_jobState/$_jobDir/$_jobId" ) )

                #  left-bound text output ("-"!)
                printf '%-12s\t%-12s\t%-12s\t%-12s\n' "$_jobState" "$_jobId" "$_jobHost" "$_jobName" #>> tmpfile

        done

        if [[ -e tmpfile ]]; then
                cat tmpfile && rm tmpfile
        fi

        return
}


# listAllJobs() - List all gsatellite jobs
#
# Returns 0 on success.
gsat/listAllJobs() {
        #  list all gsatellite jobs
        #
        #  usage:
        #+ gsatlc/listAllJobs

        #  perhaps locking needed before listing?

        #  right-bound text ouptut (default!)
        printf "%12s\t%12s\t%12s\t%12s\n" "job.state" "job.id" "job.execHost" "job.name"
        echo -e "------------\t------------\t------------\t------------"

        for _jobDir in $( ls -1 "$_gscheduleBaseDir/jobs" ); do

                #echo "($$) DEBUG: _jobDir=\"$_jobDir\""

                local _jobId=$( basename "$_gscheduleBaseDir/jobs/$_jobDir" )
                _jobId=${_jobId%.d}
                local _jobState=$( cat "$_gscheduleBaseDir/jobs/$_jobDir/job.state" 2>/dev/null )
                local _jobHost=$( cat "$_gscheduleBaseDir/jobs/$_jobDir/job.execHost" 2>/dev/null )
                local _jobName=$( basename $( readlink "$_gscheduleBaseDir/jobs/$_jobDir/$_jobId" ) )

                #  left-bound text output ("-"!)
                printf '%-12s\t%-12s\t%-12s\t%-12s\n' "$_jobState" "$_jobId" "$_jobHost" "$_jobName" #>> tmpfile

        done

        if [[ -e tmpfile ]]; then
                cat tmpfile && rm tmpfile
        fi

        return
}


# qstat() - Show information/statistics about jobs
#
# $_jobState: Desired job state
#
# Returns 0 on success, 1 otherwise.
gsat/qstat() {
        #  show info about jobs
        #
        #  usage:
        #+ gsatctl/qstat [jobState]
        local _jobState="$1"

        if [[ "$_jobState" == "all" ]]; then
                gsatctl/listAllJobs
        elif [[ "$_jobState" == "ready" || \
                "$_jobState" == "running" || \
                "$_jobState" == "finished" || \
                "$_jobState" == "failed" ]]; then
                gsatctl/listJobsInState "$_jobState"
        else
                return 1
        fi

        return    

}

