#  ipc/file.bashlib - utility functions for IPC communication with dirs and
#+ files

:<<COPYRIGHT

Copyright (C) 2012 Frank Scheiner

The program is distributed under the terms of the GNU General Public License

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

COPYRIGHT

:<<INCLUDE
../ipc.bashlib
INCLUDE

:<<FUNCTIONS
ipc/file/sendMsg
ipc/file/receiveMsg
ipc/file/getHostNameForMsgBox
ipc/file/getPidForMsgBox
ipc/file/getLocalMsgBoxByName
ipc/file/createAliasMsgBox
ipc/file/createTempMsgBox
ipc/file/createMsgBox
ipc/file/removeLocalMsgBoxByName
ipc/file/removeMsgBox
ipc/file/isAliasMsgBox
FUNCTIONS

#  TODO:
#  Only source a "parent" lib if it's not already loaded by a sister/brother
#+ lib.
. "$_LIB"/ipc.bashlib

ipc/file/getHostNameForMsgBox() {
        #  get the FQDN for the specified message box
        #
        #  usage:
        #+ ipc/file/getHostNameForMsgBox messageBox

        local _messageBox="$1"

        if ipc/file/isAliasMsgBox "$_messageBox"; then
                #  get corresponding message box for alias message box
                #  NOTICE:
                #+ Alias message boxes mustn't use directories, but only the name of
                #+ the corresponding message box.
                _messageBox="$( dirname $_messageBox )/$( readlink $_messageBox )"
        fi

        local _hostName=""

        local _tmp=$( dirname "$_messageBox" )

        local _tmpRetVal1="$?"

        _hostName=$( basename "$_tmp" )

        local _tmpRetVal2="$?"

        echo "$_hostName"

        return $(( $_tmpRetVal1 && $_tmpRetVal2 ))
}

ipc/file/getPidForMsgBox() {
        #  get the PID for the specified message box
        #
        #  usage:
        #+ ipc/file/getPidForMsgBox messageBox

        local _messageBox="$1"

        if ipc/file/isAliasMsgBox "$_messageBox"; then
                #  get corresponding message box for alias message box
                #  NOTICE:
                #+ Alias message boxes mustn't use directories, but only the name of
                #+ the corresponding message box.
                _messageBox="$( dirname $_messageBox )/$( readlink $_messageBox )"
        fi

        #  the name of a message box is constructed as follows:
        #+ "<PID>.inbox"
        local _pid=$( basename "$_messageBox" | cut -d '.' -f 1 )
                if [[ "$?" == "0" ]]; then
                echo "$_pid"
                return 0
        else
                return 1
        fi
}

ipc/file/getLocalMsgBoxByName() {
        #  get a local message box by its name
        #
        #  usage:
        #+ ipc/file/getLocalMsgBoxByName messageBoxName

        local _messageBoxName="$1"

        local _hostName=$( hostname --fqdn )

        local _messageBoxPath="$_MBOXES/$_hostName"

        if [[ ! -e "$_messageBoxPath/$_messageBoxName" ]]; then
                return 1
        else
                echo "$_messageBoxPath/$_messageBoxName"
                return 0
        fi
}

#ipc/file/createAliasForMsgBox() {
#    local _messageBox="$1"
#    local _aliasName="$2"
#
#    local _messageBoxPath="$_MBOXES/$_hostName"
#
#    if [[ ! -e "$_messageBoxPath/$_messageBoxName" ]]; then
#        return 1
#    else
#        ln -s "$_messageBox" "$_messageBoxPath/$_aliasName" &>/dev/null
#        return
#    fi
#}

ipc/file/createAliasMsgBox() {
        #  create an alias message box (to allow addressing of specific message
        #+ boxes with "well known" message box names, e.g. "sigfwd.inbox" for
        #+ the message box of the signal forwarding process)
        #
        #  usage:
        #+ ipc/file/createAliasMsgBox messageBox aliasMessageBoxName

        local _messageBox="$1"
        local _aliasMessageBoxName="$2"

        local _aliasMessageBox="$( dirname $_messageBox )/$_aliasMessageBoxName"

        #  create alias message box
        ln -s "$( basename $_messageBox )" "$_aliasMessageBox"

        local _retVal="$?"

        echo "$_aliasMessageBox"

        return "$_retVal"
}

ipc/file/createTempMsgBox() {
        #  create temporary message box. Temporary message boxes don't have a
        #+ PID associated to it.
        #
        #  usage:
        #+ ipc/file/createTempMsgBox

        local _hostName=$( hostname --fqdn )

        local _messageBoxPath="$_MBOXES/$_hostName"

        if [[ ! -e "$_messageBoxPath" ]]; then
                mkdir -p "$_messageBoxPath" &>/dev/null
                while ! ls "$_messageBoxPath" &>/dev/null; do
                        sleep 0.1
                done
        fi

        #  create temporary message box
        local _tempMessageBox=$( /bin/mktemp --directory -p "$_messageBoxPath" XXXXXXXX 2>/dev/null )

        _retVal="$?"

        mv "$_tempMessageBox" "$_tempMessageBox.inbox"

        echo "$_tempMessageBox.inbox"

        return "$_retVal"    
}

ipc/file/createMsgBox() {
        #  create a message box
        #
        #  usage:
        #+ ipc/file/createMsgBox messageBoxName

        #  TODO:
        #  Change interface of function to use a PID as parameter.

        local _messageBoxName="$1"

        local _hostName=$( hostname --fqdn )

        local _messageBoxPath="$_MBOXES/$_hostName"

        if [[ ! -e "$_messageBoxPath" ]]; then
                mkdir -p "$_messageBoxPath" &>/dev/null
                while ! ls "$_messageBoxPath" &>/dev/null; do
                        sleep 0.1
                done
        fi

        #  create message box
        mkdir "$_messageBoxPath"/$_messageBoxName &>/dev/null

        _retVal="$?"

        echo "$_messageBoxPath/$_messageBoxName"

        return "$_retVal"
}

ipc/file/removeLocalMsgBoxByName() {
        #  remove the local message box with the specified name
        #
        #  usage:
        #+ ipc/file/removeLocalMsgBoxByName messageBoxName
        local _messageBoxName="$1"

        #  remove message box
        ipc/file/removeMsgBox "$( ipc/file/getLocalMsgBoxByName $_messageBoxName )"

        _retVal="$?"

        return "$_retVal"
}

ipc/file/removeMsgBox() {
        #  remove the specified message box
        #
        #  usage:
        #+ ipc/file/removeMsgBox messageBox

        local _messageBox="$1"

        #  remove message box
        rm -rf "$_messageBox" &>/dev/null

        _retVal="$?"

        return "$_retVal"
}

ipc/file/isAliasMsgBox() {
        #  is the specified message box an alias for another message box?
        #
        #  usage:
        #+ ipc/file/isAliasMsgBox

        local _messageBox="$1"

        if [[ -h "$_messageBox" ]]; then
                return 0
        else
                return 1
        fi
}

ipc/file/sendMsg() {
        #  send message to the message box of a process
        #
        #  usage:
        #+ ipc/file/sendMsg messageBox message
        #+
        #+ message format: 'command;answerBox'
        #+ command depends on the functionality the destination process supports.
        #+ Default message processing is provided by ipc/file/msgproc.bashlib.
        local _messageBox="$1"
        local _message="$2"

        local _sendRetVal=0

        if ipc/file/isAliasMsgBox "$_messageBox"; then
                #  get corresponding message box for alias message box
                #  NOTICE:
                #+ Alias message boxes mustn't use directories, but only the name of
                #+ the corresponding message box.
                _messageBox="$( dirname $_messageBox )/$( readlink $_messageBox )"
                [[ "$_DEBUG" == "1" ]] && echo "($$) DEBUG: in sendMsg() _messageBox=\"$_messageBox\"" 1>&2
        fi

        local _counter=0

        #  message box not existing?
        while [[ ! -e "$_messageBox" ]]; do
                #  looks like, but check three times at max before giving up
                touch -mc "$_messageBox" &>/dev/null

                if [[ $_counter -eq 3 ]]; then
                        return 2
                fi

                _counter=$(( $_counter + 1 ))
        done

        while [[ 1 ]]; do
                #  mktemp returns the name of the message file preceded by the
                #+ message box (dir). If this has a relative path, the returned
                #+ path is also relative!
                #  Create file for message, but hide it as long as the message
                #+ was not copied to the file.
                local _messageFileWithPath=$( mktemp -p "$_messageBox" .message.XXXXXXXX )
                if [[ "$?" != "0" ]]; then
                        sleep 0.1
                        continue
                fi
                local _messageFileName=$( basename "$_messageFileWithPath" )
                #  TODO:
                #+ The mv sometimes seems not to work (e.g. in a test case where
                #+ 60 senders sent 60 messages simultaneously (inter-node comm
                #+ over NFS)and the receiver answered asynchronously to all 60
                #+ senders (now receivers)).
                #+ A receiver that waits on a new message will then block, even
                #+ if a new message arrived.
                #+ But as it was not yet renamed, the receiver cannot detect
                #+ this.
                echo "$_message" > "$_messageFileWithPath" && \
                mv "$_messageFileWithPath" "$_messageBox"/${_messageFileName##.}
                local _sendRetVal="$?"
                break
        done

        return "$_sendRetVal"

}

ipc/file/receiveMsg() {
        #  receive a message from a message box
        #
        #  usage:
        #+ ipc/file/receiveMsg messageBox
        local _messageBox="$1"
        local _message=""

        local _receiveRetVal=0

        if ipc/file/isAliasMsgBox "$_messageBox"; then
                #  get corresponding message box for alias message box
                #  NOTICE:
                #+ Alias message boxes mustn't use directories, but only the name of
                #+ the corresponding message box.
                _messageBox="$( dirname $_messageBox )/$( readlink $_messageBox )"
                [[ "$_DEBUG" == "1" ]] && echo "($$) DEBUG: in receiveMsg() _messageBox=\"$_messageBox\" has alias" 1>&2
        fi

        touch -c "$_messageBox" &>/dev/null

        if [[ ! -e "$_messageBox" ]]; then
                return 2
        fi

        while [[ 1 ]]; do
                #                         +- list one file per line
                #                         |  +- sort by "ctime (time of last modification of file status information)" (from ls(1))
                #                         |  |  +- reverse listing 
                #                         |  |  |
                #                         |  |  |                                             +- pick the "oldest" file
                #                         |  |  |                                             |
                local _nextMessage=$( ls -1 -c -r "$_messageBox"/message* 2>/dev/null | head -1 )
                if [[ "$?" != "0" ]]; then
                        sleep 0.1
                        continue
                fi
                [[ "$_DEBUG" == "1" ]] && echo "($$) DEBUG: in receiveMsg() _nextMessage=\"$_nextMessage\"." 1>&2
                if [[ "$_nextMessage" != "" ]]; then
                        #touch -a --no-create "$_nextMessage" 2>/dev/null
                        _message=$( cat "$_nextMessage" )
                        _nextMessageName=$( basename "$_nextMessage" )
                        mv "$_nextMessage" "$_messageBox"/read."$_nextMessageName" &>/dev/null && rm "$_messageBox"/read."$_nextMessageName" &>/dev/null
                        #while stat "$_nextMessage" &>/dev/null; do
                        #        rm -f "$_nextMessage" &>/dev/null
                        #        echo "hanging" 1>&2
                        #        sleep 0.1
                        #done
                        break
                fi
        done


        if [[ "$_message" != "" ]]; then
                echo "$_message"
                [[ "$_DEBUG" == "1" ]] && echo "($$) DEBUG: in receiveMsg() _message=\"$_message\"" 1>&2
                return 0
        else
                [[ "$_DEBUG" == "1" ]] && echo "($$) DEBUG: in receiveMsg() _message=\"$_message\"" 1>&2
                return 1
        fi

}

ipc/file/messageAvailable() {
        #  check if a message is available in the specified message box
        #
        #  usage:
        #+ ipc/file/messageAvailable messageBox

        local _messageBox="$1"

        #                         +- list one file per line
        #                         |  +- sort by "ctime (time of last modification of file status information)" (from ls(1))
        #                         |  |  +- reverse listing 
        #                         |  |  |
        #                         |  |  |                                             +- pick the "oldest" file
        #                         |  |  |                                             |
        local _nextMessage=$( ls -1 -c -r "$_messageBox"/message* 2>/dev/null | head -1 )

        if [[ "$_nextMessage" != "" ]]; then
                return 0
        else
                return 1
        fi
}

